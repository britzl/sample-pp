local ANIM_IDLE = hash("warrior_idle")
local ANIM_RUN = hash("warrior_run")

local function play_anim(self, anim)
	if self.anim ~= anim then
		sprite.play_flipbook("#sprite", anim)
		self.anim = anim
	end
end

function init(self)
	self.anim = nil
	self.dir = vmath.vector3()
	self.connected = false

	msg.post("#", "acquire_input_focus")
	msg.post("@render:", "use_camera_projection")

	local username = nil
	local password = nil
	msg.post("/pp", "pp_init", { username = username, password = password })

	play_anim(self, ANIM_IDLE)
end

function update(self, dt)
	if not self.connected then return end
	
	local move = self.dir * 10 * dt
	local pos = go.get_position()
	pos = pos + move
	pos.z = 1 - (pos.y / 10000)
	go.set_position(pos)

	if move.x ~= 0 or move.y ~= 0 then
		local d = {
			x = move.x,
			y = move.y,
		}
		msg.post("/pp", "pp_message", d)
		sprite.set_hflip("#sprite", move.x < 0)
		play_anim(self, ANIM_RUN)
	else
		play_anim(self, ANIM_IDLE)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("up") then
		self.dir.y = action.value
	elseif action_id == hash("down") then
		self.dir.y = -action.value
	end
	if action_id == hash("left") then
		self.dir.x = -action.value
	elseif action_id == hash("right") then
		self.dir.x = action.value
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("pp_connected") then
		print("player connected")
		msg.post("/pp", "pp_join")
		self.connected = true
	elseif message_id == hash("pp_disconnected") then
		print("player disconnected")
		self.connected = false
		play_anim(self, ANIM_IDLE)
	elseif message_id == hash("pp_authentication_error") then
		print("auth error")
		pprint(message)
	elseif message_id == hash("pp_connection_error") then
		print("connection error")
		pprint(message)
	else
		print(message_id)
	end
end
